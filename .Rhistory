c(1*pi, 10*pi)
source("D:/Becoming Dev/R Scripts/Lecture 2.R", echo=TRUE)
source("D:/Becoming Dev/R Scripts/Lecture 2.R", echo=TRUE)
a <- c(1:3)
b <- c(4:6)
a
b
A <- 10
A
c(a, b)
b <- c("O", "D", "T", "U")
class(b)
d <- c(a, b)
d
mode(d)
class(d)
c(1, 0, 1, 3) + c(0, 1, 2, 3)
c(1, 0, 1, 3) * c(0, 1, 2, 3)
c(1, 2, 3) + 1
c(1, 2, 3) + c(1, 2)
c(1, 2, 3, 4) + c(1, 2)
c(1, 2, 3, 4 + c(2, 1))
v1 <- c(1:5)
v1 - 1
c("I love this course!
R is love at first sight.")
c("I love this course! \n R is love at first sight.")
max(3, 6, 6)
max(3, 6, 6
)
a <- 7
b <- 7
b <- 3
c <- sqrt(a^2 + b^2)
c
c <- sqrt(a^2, b^2)
c <- sqrt(a^2 + b^2)
c
7 <- x
7 -> x
b = 9
ls()
ls.str()
x <- function(asbdj) {
print(asbdj)
}
str(x)
ls.str()
rm(x)
ls.str()
rm(a)
ls()
rm(list=ls())
ls
ls()
x <- 1
m <- m(seq(1, 10), row=2)
m <- matrix(seq(1, 10), row=2)
m <- matrix(seq(1, 10), 2)
m
m <- matrix(seq(1, 10), nrow=2, nol=5)
m <- matrix(seq(1, 10), nrow=2, ncol=5)
m <- matrix(seq(1, 10), nrow=2, ncol=4)
class(m)
typeof(m)
M <- 1:15
class(M)
dim(M) <- c(3, 5)
M
class(M)
b <- c(11:15)
a <- c(1:5)
rbind(a, b)
cbind(a, b)
cbind(b, a)
column_binded <- cbind(b, a)
r_binded <- rbind(a, b)
r <- matrix(1:14, 1)
dim(r) <- c(2, 7)
x <- c(1, 2, 3)
y <- c(11, 22, 33)
x <- (111, "twenty", "thirty")
x <- (111, "twenty", "thirty")
x <-c(111, "twenty", "thirty")
x <- c(1, 2, 3)
y <- c(11, 22, 33)
z <- c(111, "twenty", "thirty")
rbind(x, y, z)
matrix(1:6, 2, 3, byrow=TRUE)
matrix(1:6, 2, 3)
matrix(1:6, 2, 3, bycol=TRUE)
matrix(1:6, 2, 3,byrow=T)
matrix(1:6, 2, 3,byrow=T)
matrix(1:6, 2, 3,byrow=T)
A <- matrix(0.5: 8.5, 3, 3)
A
A[2, 3]
A$1
A
data <- data.frame(A, colnames("xD", ":D", "asdjlas"))
rbind(x, y, z)
data <- data.frame(df)
A[, 2]
A
A[-2, -3]
A[2, 3] <- 99
A
diag(A) <- 4
A
A
t(A)
A <- diag(4)
A
A <- matrix(x(1, 3, 6, 2, 3, 5), 3, 2)
A <- matrix(c(1, 3, 6, 2, 3, 5), 3, 2)
A
B <- matrix(c(3, -2, 8, 1, 4, 5), 3, 2)
B
A + b
A + B
A - B
dim(A)
dim(B)
A * B
A
B
A * B
A %*% B
?%*%
help(%*%)
rbind(c(3, 1), c(4, 2))
bind <- rbind(c(3, 1), c(4, 2))
bind
solve(A)
solve(b)
solve(bind)
# Array
myarray <- array(data = 1:24, dim = c(3, 2, 4))
myarray
myarray <- array(data = 1:24, dim = c(3, 4, 2))
myarray
listmat <- list(matrix(1:12, 3, 4), matrix(13:24, 3, 4))
listmat
listmat[[1]]
listmat[[1][1, 2]]
listmat[[1]]
listmat[[1]][1, 2]
my4array <- array(data=rep(1:24, 3), dim = c(3, 4, 2, 3))
my4array
myarray
myarray[2, , 2]
my4array[3, 2, 2, 3]
myfactor <- factor(c("I", "Z", "M", "I", "R", "R", "R"))
myfactor
mygender <- factor(c("F", "M", "M", "F", "F"))
mygender
class(c(mygender, myfactor))
class(c(mygender, x))
class(list = c(mygender, myfactor))
class(list = list(mygender, myfactor))
class(list = l(mygender, myfactor))
myfactor
levels(myfactor) <- c("O", "D", "T", "U")
myfactor
planets <- c("Mervury", "Mars", "Venus", "Earth", "Neptune", "Uranus", "Saturn", "Jupiter")
planets
planets <- c("Mercury", "Mars", "Venus", "Earth", "Neptune", "Uranus", "Saturn", "Jupiter")
planets
planets.fac <- factor(planets, levels = planets, ordered = T)
planets
planets.fac
planets == 0
planets == "0"
planets == "1"
planets == "Mercury"
myfactor == "Mercury"
myfactor == "O"
list(1, 2, 3, 4)
x <- 1:12
x <- as.list(x)
x
iris
cat(x[[2]], "Welcomes You!")
mylist <- list(myname="FGY", myseq=1:10, mydata=head(iris))
mylist
names(mylist)
mylist$myname
mylist[[2, 3]]
mylist[[c(2, 3)]]
mylist[c(2, 3)]
str(iris)
str(mylist)
list_data <- list(c("Apple", "Samsung", "PP3"), matrix(c(3, 9, 5, 1, -2, 8), nrow = 2), list("blue", 2.3))
lsit_data
list_data
names(list_data)
names(list_data) <- c("Brand_Names", "My_Matrix", "Pizza")
names(list_data)
list_data
list_data[4] <- 4
list_data
list_data[[4]] <- 4
list_data
list_data[[4]] <- NULL
list_data
years <- list(1881, 1919, 1923, 1938)
years
years[[1]]
years[1]
years[c(1, 2)]
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
shaded_area
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
find_prob(-0.985)
1 - 0.16231
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.99, alternative = "two-sided")
z.test(2.51, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(2.51, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(2.51, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(2.51, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(2.51, alternative = "two-sided")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
warnings()
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
warnings
warnings()
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
extrafont::loadfonts("win")
install.packages("extrafont")
extrafont::loadfonts("win")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
install.packages("extrafont")
extrafont::loadfonts("win")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
windowsFont()
windowsFonts()
font_import()
library(extrafont)
font_import()
y
library(extrafont)
font_import()
y
library(extrafont)
font_import()
font_import()
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
windowsFonts()
font_files
font_files()
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
loadfonts(device = "win")
windowsFonts()
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.95, alternative = 'two-sided')
z.test(1.97, alternative = 'two-sided')
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.97, alternative = 'two-sided')
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.97, alternative = 'two-sided')
print("hello \nworld")
print("hello /nworld")
print("hello \n world")
print("hello\nworld")
cat("hello\nworld")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.97, alternative = 'two-sided')
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.97, alternative = 'two-sided')
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.97, alternative = 'two-sided')
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
z.test(1.97, alternative = 'two-sided')
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.z_test(15530, 16910, 5160, 5840, 200, 250, alternative = "two-sided", confint = T)
two_sample.z_test(15530, 16900, 5160, 5840, 200, 250, alternative = "two-sided", confint = T)
two_sample.z_test(15530, 16910, 5160, 5840, 200, 250, alternative = "two-sided", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.z_test(15530, 16910, 5160, 5840, 200, 250, alternative = "two-sided", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.z_test(15530, 16910, 5160, 5840, 200, 250, alternative = "two-sided", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.z_test(15530, 16910, 5160, 5840, 200, 250, alternative = "two-sided", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.z_test(15530, 16910, 5160, 5840, 200, 250, alternative = "two-sided", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
two_sample.t_test(93, 129, 20, 24, 8, 9, alternative = "less", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(93, 129, 20, 24, 8, 9, alternative = "less", confint = T, equal_var = T)
two_sample.t_test(93, 129, 20, 24, 8, 9, alternative = "less", confint = T, equal_var = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(93, 129, 20, 24, 8, 9, alternative = "less", confint = T, equal_var = T)
two_sample.t_test(93, 129, 20, 24, 8, 9, alternative = "less", confint = T, equal_var = T, alpha = 0.1)
two_sample.t_test(93, 129, 20, 24, 8, 9, alternative = "less", confint = T, equal_var = T, alpha = 0.01)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.t_test(595.8, 661.1, 35.7, 115.7, 10, 20, alternative = "less", confint = T)
?sd
sd(c(5.9, 4.2, 9.4, -0.2, -9.2, 34., -6.8, 7, 14.5, 17.9))
sd(c(5.9, 4.2, 9.4, -0.2, -9.2, 34.3, -6.8, 7, 14.5, 17.9))
sd(c(5.9, 4.2, 9.4, -0.2, -9.2, 34.3, -6.8, 7, 14.5, 17.3))
args(z.test)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
args(z.test)
args(t.test)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
x
sd(c(5.9, 4.2, 9.4, -0.2, -9.2, 34.3, -6.8, 7, 14.5, 17.3))
v <- c(5.9, 4.2, 9.4, -0.2, -9.2, 34.3, -6.8, 7, 14.5, 17.3)
paired_diff.test(v, alternative = "two-sided", confint = T, alpha = 0.1)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
paired_diff.test(v, alternative = "two-sided", confint = T, alpha = 0.1)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.prop_test(117, 318, 109, 255, alternative = "less", alpha = 0.05, confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.prop_test(117, 318, 109, 255, alternative = "less", alpha = 0.05, confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.prop_test(117, 318, 109, 255, alternative = "less", alpha = 0.05, confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.prop_test(117, 318, 109, 255, alternative = "less", alpha = 0.05, confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.prop_test(117, 318, 109, 255, alternative = "less", alpha = 0.05, confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.prop_test(117, 318, 109, 255, alternative = "less", alpha = 0.05, confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.prop_test(117, 318, 109, 255, alternative = "less", alpha = 0.05, confint = T)
two_sample.prop_test(104, 11000, 189, 11000, alternative = "less", alpha = 0.05, confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.prop_test(117, 318, 109, 255, alternative = "less", alpha = 0.05, confint = T)
two_sample.prop_test(104, 11000, 189, 11000, alternative = "less", alpha = 0.05, confint = T)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.prop_test(104, 11000, 189, 11000, alternative = "less", alpha = 0.05, confint = T)
two_sample.prop_test(117, 318, 109, 255, alternative = "less", alpha = 0.05, confint = T)
two_sample.z_test(15530, 16910, 5160, 5840, 200, 250, "two-sided", T, 0.05)
two_sample.z_test(812, 789, sqrt(85512), sqrt(74402), 150, 200, "two-sided", T, 0.1)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
two_sample.z_test(812, 789, sqrt(85512), sqrt(74402), 150, 200, "two-sided", T, 0.1)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/ODTU/Sem 4/STAT295/ggplot Recit 5.R", echo=TRUE)
source("D:/ODTU/Sem 4/STAT295/ggplot Recit 5.R", echo=TRUE)
source("D:/ODTU/Sem 4/STAT295/ggplot Recit 5.R", echo=TRUE)
source("D:/ODTU/Sem 4/STAT295/ggplot Recit 5.R", echo=TRUE)
source("D:/ODTU/Sem 4/STAT295/ggplot Recit 5.R", echo=TRUE)
R.version.string
library(sf)
library(terra)
library(dplyr)
library(spData)
library(spDataLarge)
install.packages("spDataLarge")
install.packages('spDataLarge',
repos='https://nowosad.github.io/drat/', type='source')
library(spDataLarge)
tm_shape(nz) +
tm_fill()
install.packages("tmap", repos = c("https://r-tmap.r-universe.dev",
"https://cloud.r-project.org"))
library(spDataLarge)
tm_shape(nz) +
tm_fill()
library(tmap)
tm_shape(nz) +
tm_fill()
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
nz_elev = rast(system.file("raster/nz_elev.tif", package = "spDataLarge"))
tm_shape(nz) +
tm_borders()
tm_shape(nz) +
tm_borders() +
tm_fill()
tm_shape(nz) +
tm_fill() +
tm_borders()
v <- c(5, 4, 8, 2, 3, 1, 6)
order(v)
v <- c(5, 4, 8, 2, 3, 1, 1)
order(v)
rank(v)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
spearmans.rank_test(x = c(35, 23, 47, 17, 10, 43, 9, 6, 28), y = c(30, 33, 45, 23, 8, 49, 12, 4, 31))
spearmans.rank_test(x = c(35, 23, 47, 17, 10, 43, 9, 6, 28), y = c(30, 33, 45, 23, 8, 49, 12, 4, 31))
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
spearmans.rank_test(x = c(35, 23, 47, 17, 10, 43, 9, 6, 28), y = c(30, 33, 45, 23, 8, 49, 12, 4, 31))
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
spearmans.rank_test(x = c(35, 23, 47, 17, 10, 43, 9, 6, 28), y = c(30, 33, 45, 23, 8, 49, 12, 4, 31))
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
spearmans.rank_test(x = c(35, 23, 47, 17, 10, 43, 9, 6, 28), y = c(30, 33, 45, 23, 8, 49, 12, 4, 31))
x = c(35, 23, 47, 17, 10, 43, 9, 6, 28); y = c(30, 33, 45, 23, 8, 49, 12, 4, 31)
(x-y)^2
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
(x-y)^2
spearmans.rank_test(x = c(35, 23, 47, 17, 10, 43, 9, 6, 28), y = c(30, 33, 45, 23, 8, 49, 12, 4, 31))
library(devtools)
install.packages("roxygen2")
library(roxygen2)
devtools::create("statli")
cwd()
getwd()
setwd("D:/Becoming Dev/stat-tools")
getwd()
devtools::create("statli")
setwd("D:/Becoming Dev")
devtools::create("statli")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
loadfonts(device = "win")
devtools::document()
getwd()
setwd("D:/Becoming Dev/statli")
getwd()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
